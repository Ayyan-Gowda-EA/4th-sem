#include <stdio.h> 
#include <stdlib.h> 
typedef struct process 
{ 
int Id, AT, BT, CT, TAT, WT, isCompl, priority; 
} pro; 
pro p[15]; 
void main() 
{ 
int n, total_WT = 0, total_TAT = 0, idleTime = 0; 
float avg_WT = 0, avg_TAT = 0; 
printf("\nEnter the number of processes:\n"); 
scanf("%d", &n); 
printf("\nEnter the arrival time, burst time and priority of the process:\n"); 
printf("AT BT P\n"); 
for (int i = 0; i < n; i++) 
{ 
} 
p[i].Id = (i + 1); 
scanf("%d%d%d", &p[i].AT, &p[i].BT, &p[i].priority); 
p[i].isCompl = 0; 
int minIndex, minPriority, completed = 0, curTime = 0; 
printf("\nGantt Chart:\n\n"); 
while (completed != n) 
{ 
minIndex = -1; 
minPriority = 9999; 
for (int i = 0; i < n; i++) 
{ 
if (p[i].AT <= curTime && p[i].isCompl == 0) 
{ 
if (p[i].priority < minPriority || (p[i].priority == minPriority && p[i].AT < 
p[minIndex].AT)) 
{ 
} 
} 
} 
minPriority = p[i].priority; 
minIndex = i; 
if (minIndex == -1) 
{ 
curTime++; // If no process which is not completed is present at the current time 
increment it. 
idleTime++; 
} 
else 
{ 
// As the process is not preempted, the process executes till it is completed, i.e., for it's 
full BT. 
if (idleTime > 0) 
{ 
} 
printf("| Idle till %d", idleTime); 
idleTime = 0; 
curTime += p[minIndex].BT; 
p[minIndex].CT = curTime; 
p[minIndex].TAT = p[minIndex].CT - p[minIndex].AT; 
p[minIndex].WT = p[minIndex].TAT - p[minIndex].BT; 
total_TAT += p[minIndex].TAT; 
total_WT += p[minIndex].WT; 
p[minIndex].isCompl = 1; 
completed++; 
printf("| P%d (%d) %d", p[minIndex].Id, p[minIndex].BT, p[minIndex].CT); 
} 
} 
printf("|\n"); 
avg_TAT = (float)total_TAT / n; 
avg_WT = (float)total_WT / n; 
// Printing the table of processes with details 
printf("\nPID\tAT\tBT\tCT\tTAT\tWT\tP\n"); 
for (int i = 0; i < n; i++) 
{ 
printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].Id, p[i].AT, p[i].BT, p[i].CT, p[i].TAT, 
p[i].WT, p[i].priority); 
} 
printf("\nAverage TAT = %.2f\nAverage WT = %.2f\n", avg_TAT, avg_WT); 
} 
/* 
Enter the number of processes: 
7 
Enter the arrival time, burst time and priority of the process: 
AT BT P 
0 3 2 
2 5 6 
1 4 3 
4 2 5 
6 9 7 
5 4 4 
7 10 10 
 
Gantt Chart: 
 
| P1 (3) 3| P3 (4) 7| P6 (4) 11| P4 (2) 13| P2 (5) 18| P5 (9) 27| P7 (10) 37| 
 
PID AT BT CT TAT WT P 
1   0    3 3    3 0   2 
2   2    5 18 16 11 6 
3   1    4 7    6 2   3 
4   4    2 13  9 7   5 
5   6    9 27 21 12 7 
6   5    4 11 6    2 4 
7    7 10 37 30 20 10 
 
Average TAT = 13.00 
Average WT = 7.71 
*/ 
 
10b. 
#include<stdio.h> 
#include<stdlib.h> 
 
typedef struct process { 
    int Id, AT, BT, CT, TAT, WT, priority;  
} pro; 
pro p[15]; 
void main() { 
int n, tempBT[15], total_WT=0, total_TAT=0; 
float avg_WT=0, avg_TAT=0; 
printf("\nEnter the number of processes:\n"); 
scanf("%d", &n); 
printf("\nEnter the arrival time, burst time and priority of the process:\n"); 
printf("AT BT p\n"); 
for(int i=0; i<n; i++) { 
p[i].Id = (i+1); 
scanf("%d%d%d", &p[i].AT, &p[i].BT, &p[i].priority); 
tempBT[i] = p[i].BT; 
} 
printf("\nGantt Chart:\n"); 
int minIndex, minPriority, completed=0, curTime = 0; 
while(completed != n) { 
minIndex = -1; 
minPriority = 9999; 
for(int i=0; i<n; i++) { 
if(p[i].AT <= curTime && p[i].BT>0) { 
if(p[i].priority < minPriority || (p[i].priority == minPriority && p[i].AT < 
p[minIndex].AT)) { 
minPriority = p[i].priority; 
minIndex = i; 
} 
} 
} 
curTime++; 
if (minIndex != -1) 
{ 
} 
} 
p[minIndex].BT--; 
printf("| P%d(1) %d", p[minIndex].Id, curTime); 
if (p[minIndex].BT == 0) 
{ 
} 
p[minIndex].CT = curTime; 
p[minIndex].TAT = p[minIndex].CT - p[minIndex].AT; 
p[minIndex].WT = p[minIndex].TAT - tempBT[minIndex]; 
total_TAT += p[minIndex].TAT; 
total_WT += p[minIndex].WT; 
completed++; 
printf("|\n"); 
avg_TAT = (float)total_TAT/n; 
avg_WT = (float)total_WT/n; 
//Printing the table of processes with details 
printf("\nPID\tAT\tBT\tCT\tTAT\tWT\tP\n"); 
for(int i=0; i<n; i++) { 
printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].Id, p[i].AT, tempBT[i], p[i].CT, p[i].TAT, 
p[i].WT, p[i].priority); 
} 
printf("\nAverage TAT = %.2f\nAverage WT = %.2f\n", avg_TAT, avg_WT); 
} 
/* 
Enter the number of processes: 
5 
 
Enter the arrival time, burst time and priority of the process: 
AT BT p 
0 3 3 
1 4 2 
2 6 4 
3 4 6 
5 2 10 
 
Gantt Chart: 
| P1(1) 1| P2(1) 2| P2(1) 3| P2(1) 4| P2(1) 5| P1(1) 6| P1(1) 7| P3(1) 8| P3(1) 9| P3(1) 10| P3(1) 
11| P3(1) 12| P3(1) 13| P4(1) 14| P4(1) 15| P4(1) 16| P4(1) 17| P5(1) 18| P5(1) 19| 
 
PID AT BT CT TAT WT P 
1   0    3 7    7 4   3 
2   1    4 5    4 0   2 
3   2    6 13 11 5   4 
4   3    4 17 14 10 6 
5   5    2 19 14 12 10 
 
Average TAT = 10.00 
Average WT = 6.20 
*/ 